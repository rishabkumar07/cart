[{"C:\\Users\\RAJESH Kr.GUPTA\\Desktop\\projects\\cart\\src\\index.js":"1","C:\\Users\\RAJESH Kr.GUPTA\\Desktop\\projects\\cart\\src\\App.js":"2","C:\\Users\\RAJESH Kr.GUPTA\\Desktop\\projects\\cart\\src\\Cart.js":"3","C:\\Users\\RAJESH Kr.GUPTA\\Desktop\\projects\\cart\\src\\Navbar.js":"4","C:\\Users\\RAJESH Kr.GUPTA\\Desktop\\projects\\cart\\src\\CartItem.js":"5"},{"size":685,"mtime":1610268992117,"results":"6","hashOfConfig":"7"},{"size":5012,"mtime":1610268869423,"results":"8","hashOfConfig":"7"},{"size":812,"mtime":1597773388532,"results":"9","hashOfConfig":"7"},{"size":1057,"mtime":1597773904861,"results":"10","hashOfConfig":"7"},{"size":1874,"mtime":1597842206468,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1vvxsae",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\RAJESH Kr.GUPTA\\Desktop\\projects\\cart\\src\\index.js",[],["24","25"],"C:\\Users\\RAJESH Kr.GUPTA\\Desktop\\projects\\cart\\src\\App.js",["26"],"import React from 'react';\nimport Cart from './Cart';\nimport Navbar from './Navbar';\nimport firebase from 'firebase';\n\n\nclass App extends React.Component {\n    constructor()\n    {\n      super();\n      this.state ={\n        products:[],\n        loading:true\n        }\n      this.db = firebase.firestore();\n    }\n\n    componentDidMount()\n    {\n      this.db\n      .collection('products')\n      .onSnapshot((snapshot)=>\n      {\n        // console.log(snapshot);\n        \n        snapshot.docs.map((doc)=>\n        {\n          console.log(doc.data())\n        })\n\n        const products = snapshot.docs.map((doc)=>{\n          const data = doc.data();\n          data['id'] = doc.id;\n          return data;\n        })\n        this.setState({\n          products,\n          loading:false\n        })\n      })\n    }\n\n    handleIncreaseQuantity = (item) =>\n    {\n        // console.log(\"Hey please inc the qty of\",item);\n        const {products} = this.state; //array product\n        const index = products.indexOf(item); //to find the particular index of that product using indexOf method of array products\n\n        // products[index].qty += 1;\n\n        // this.setState({\n        //     products : products //or simply just products as key and value have same name\n        // })\n\n        //We will get the id of that document in firebase\n        const docRef = this.db.collection('products').doc(products[index].id);\n        docRef\n        .update(\n          {\n            qty:products[index].qty + 1\n          }\n        ).then(()=>{console.log(\"Document Updated\")})\n        .catch((err)=>{console.log(\"Error:\",err)})\n\n    }\n    handleDecreaseQuantity = (item) =>\n    {\n        // console.log('Hey please dec the qty of',item);\n        const{products} = this.state; //getting products array\n        const index = products.indexOf(item); \n\n        if(products[index].qty===0)\n        {\n            return;\n        }\n        // products[index].qty -= 1;\n\n        // this.setState({\n        //     products\n        // })\n        const docRef = this.db.collection('products').doc(products[index].id);\n        docRef\n        .update(\n          {\n            qty:products[index].qty - 1\n          }\n        ).then(()=>{console.log(\"Document Updated\")})\n        .catch((err)=>{console.log(\"Error:\",err)})\n\n    }\n    handleDeleteProduct = (id) =>\n    {\n        // const {products} = this.state;\n        const docRef = this.db.collection('products').doc(id);\n\n        docRef\n        .delete()\n        .then(()=>{console.log(\"Deleted successfully\")})\n        .catch((err)=>{console.log(\"error\",err)})\n    }\n    getCartCount = () =>\n    {\n      const{products} = this.state;\n      let count = 0;\n      products.forEach((item)=>{\n        count += item.qty;\n      })\n      return count;\n    }\n    getCartTotal = () =>\n    {\n      const{products} = this.state;\n      let total = 0;\n      products.forEach((item)=>{\n        total += item.price * item.qty;\n      })\n      return total;\n    }\n    // addProduct =() =>\n    // {\n    //   this.db.collection('products')\n    //   .add(\n    //     {\n    //       img:'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSTFSNPLRq9nggWpd9IA1xsPEFK_S5k2jPlhr135oLjWWE3rbTuuTH1kfA4VVQg45zPatzPOJAK&usqp=CAc',\n    //       price:900,\n    //       qty:2,\n    //       title:'Sunglass'\n    //     })\n    //   .then((docRef)=>\n    //   { \n    //     console.log(\"Product has been added\",docRef);\n\n    //   })\n    //   .catch((err)=>{console.log(\"Error\",err);})\n    // }\n\n    // sort = () =>\n    // {\n    //   console.log(\"Hey\");\n    //   this.db.collection('products').orderBy('price','desc')\n    //   .onSnapshot((snapshot)=>\n    //   {\n    //     // console.log(snapshot);\n        \n    //     snapshot.docs.map((doc)=>\n    //     {\n    //       console.log(doc.data())\n    //     })\n\n    //     const products = snapshot.docs.map((doc)=>{\n    //       const data = doc.data();\n    //       data['id'] = doc.id;\n    //       return data;\n    //     })\n    //     this.setState({\n    //       products,\n    //       loading:false\n    //     })\n    //   })\n    // }\n    render()\n    {\n      const {products,loading} = this.state;\n      return (\n        <div className=\"App\">\n          <Navbar\n            count = {this.getCartCount()}\n          />\n          {/* <button onClick={this.sort}>Sort</button> */}\n          {/* <button onClick={this.addProduct} style={{padding:10,fontSize:15}}>Add a Product</button> */}\n          <Cart\n            products={products} \n            onIncreaseQuantity = {this.handleIncreaseQuantity}\n            onDecreaseQuantity = {this.handleDecreaseQuantity}\n            onDeleteProduct = {this.handleDeleteProduct}\n          />\n          {loading && <h1>Loading....</h1>}\n          <div style={styles}>\n            Total: â‚¹{this.getCartTotal()}\n          </div>\n        </div>\n      );\n    }\n    \n  }\n  const styles = {\n    fontSize:25,\n    padding:20,\n    textAlign:'center',\n    color:\"#388e3c\",\n    borderTop : '5px dashed #e0e0e0'\n  }\n  \n\n\nexport default App;\n","C:\\Users\\RAJESH Kr.GUPTA\\Desktop\\projects\\cart\\src\\Cart.js",[],"C:\\Users\\RAJESH Kr.GUPTA\\Desktop\\projects\\cart\\src\\Navbar.js",[],"C:\\Users\\RAJESH Kr.GUPTA\\Desktop\\projects\\cart\\src\\CartItem.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":26,"column":32,"nodeType":"33","messageId":"34","endLine":26,"endColumn":34},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]